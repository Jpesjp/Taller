import pygame
import threading
import time
import random

# Inicialización de pygame
pygame.init()

# Tamaño de la ventana del juego
ANCHO, ALTO = 800, 600
VENTANA = pygame.display.set_mode((ANCHO, ALTO))
pygame.display.set_caption("Videojuego con hilos")

# Colores (RGB)
NEGRO = (0, 0, 0)
AZUL = (0, 0, 255)
ROJO = (255, 0, 0)
VERDE = (0, 255, 0)


# ======================
# Clase base: Nave
# ======================
class Nave:
    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.ancho = 50
        self.alto = 30
        self.color = color
        self.velocidad = 5
        self.viva = True
        self.thread = None

    def dibujar(self, ventana):
        if self.viva:
            pygame.draw.rect(ventana, self.color, (self.x, self.y, self.ancho, self.alto))

    def mover(self):
        pass

    def iniciar_hilo(self):
        """Cada nave corre en su propio hilo"""
        self.thread = threading.Thread(target=self.run, daemon=True)
        self.thread.start()

    def run(self):
        while self.viva:
            self.mover()
            time.sleep(0.02)

    def rect(self):
        return pygame.Rect(self.x, self.y, self.ancho, self.alto)


# ======================
# Clase: MiNave (Jugador)
# ======================
class MiNave(Nave):
    def __init__(self, x, y, color):
        super().__init__(x, y, color)
        self.proyectiles = []
        self.movimiento = None

    def mover(self):
        if self.movimiento == "izquierda" and self.x > 0:
            self.x -= self.velocidad
        if self.movimiento == "derecha" and self.x < ANCHO - self.ancho:
            self.x += self.velocidad

    def disparar(self):
        proyectil = Proyectil(self.x + self.ancho // 2, self.y, VERDE)
        proyectil.iniciar_hilo()
        self.proyectiles.append(proyectil)


# ======================
# Clase: NaveEnemiga
# ======================
class NaveEnemiga(Nave):
    def __init__(self, x, y, color):
        super().__init__(x, y, color)
        self.direccion = 1

    def mover(self):
        self.x += self.velocidad * self.direccion
        if self.x <= 0 or self.x >= ANCHO - self.ancho:
            self.direccion *= -1


# ======================
# Clase: Proyectil
# ======================
class Proyectil(Nave):
    def __init__(self, x, y, color):
        super().__init__(x, y, color)
        self.ancho = 5
        self.alto = 15
        self.velocidad = 7

    def mover(self):
        self.y -= self.velocidad
        if self.y < 0:
            self.viva = False

    def rect(self):
        return pygame.Rect(self.x, self.y, self.ancho, self.alto)


# ======================
# Spawner de enemigos (con hilos)
# ======================
def spawner(enemigos, lock, intervalo=3):
    """Hilo que genera nuevas naves enemigas cada cierto tiempo"""
    while True:
        time.sleep(intervalo)
        nuevo = NaveEnemiga(random.randint(50, ANCHO - 100), random.randint(50, 200), ROJO)
        nuevo.iniciar_hilo()
        with lock:
            enemigos.append(nuevo)


# ======================
# Bucle principal del juego
# ======================
def main():
    run = True
    clock = pygame.time.Clock()

    # Crear jugador
    jugador = MiNave(ANCHO // 2, ALTO - 50, AZUL)
    jugador.iniciar_hilo()

    # Lista de enemigos
    enemigos = []
    lock = threading.Lock()

    # ======================
    # Crear enemigos iniciales
    # ======================
    for _ in range(3):  # Aparecen 3 enemigos al iniciar
        nuevo = NaveEnemiga(random.randint(50, ANCHO - 100), random.randint(50, 200), ROJO)
        nuevo.iniciar_hilo()
        enemigos.append(nuevo)

    # Hilo spawner de enemigos
    threading.Thread(target=spawner, args=(enemigos, lock), daemon=True).start()

    # Bucle principal
    while run:
        clock.tick(60)
        VENTANA.fill(NEGRO)

        # Eventos
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    jugador.movimiento = "izquierda"
                if event.key == pygame.K_RIGHT:
                    jugador.movimiento = "derecha"
                if event.key == pygame.K_SPACE:
                    jugador.disparar()
            if event.type == pygame.KEYUP:
                if event.key in (pygame.K_LEFT, pygame.K_RIGHT):
                    jugador.movimiento = None

        # Dibujar jugador
        jugador.dibujar(VENTANA)

        # Dibujar enemigos y eliminar los muertos
        with lock:
            for enemigo in enemigos[:]:
                if enemigo.viva:
                    enemigo.dibujar(VENTANA)
                else:
                    enemigos.remove(enemigo)

        # Dibujar proyectiles y revisar colisiones
        for proyectil in jugador.proyectiles[:]:
            if proyectil.viva:
                proyectil.dibujar(VENTANA)
                # Colisión con enemigos
                with lock:
                    for enemigo in enemigos:
                        if enemigo.viva and proyectil.rect().colliderect(enemigo.rect()):
                            enemigo.viva = False
                            proyectil.viva = False
                            break
            else:
                jugador.proyectiles.remove(proyectil)

        pygame.display.update()

    # Cerrar hilos
    jugador.viva = False
    with lock:
        for enemigo in enemigos:
            enemigo.viva = False
    pygame.quit()


if __name__ == "__main__":
    main()
